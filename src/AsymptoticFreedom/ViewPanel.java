/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AsymptoticFreedom;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
/**
 *
 * @author Geonmo
 */
public class ViewPanel extends javax.swing.JPanel {
    Image image1, image2, image3;
    boolean meson ;
    /**
     * Creates new form ViewPanel
     */
    int selected_particle;
    public ViewPanel() {
        initComponents();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public Image loadImage(String flavour, String color) {
        String image_path = String.format("/AsymptoticFreedom/resource/%s_quark_%s.png",flavour,color);
        Image image = null;
        try {
            image = ImageIO.read( this.getClass().getResource(image_path));
            } catch (IOException ex) {
            Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        System.out.println("Load image");        
        image = image.getScaledInstance(50,50,Image.SCALE_DEFAULT);
        return image;
        
    }
    public void buildMeson(String flavour1, String flavour2){
        Random random = new Random();        
        String color_charge;
        int color = random.nextInt(3)+1;
        if ( color == 1 ) {
            color_charge = "red";
        }
        else if (color ==2 ) {
            color_charge = "green";
        }
        else {
            color_charge = "blue";
        }        
        System.out.format("Color charge : %s\n",color_charge ); 
        image1 = loadImage(flavour1,color_charge);
        image2 = loadImage(flavour2,color_charge);                
        meson = true;
    }
    public void buildBaryon(String flavour1, String flavour2, String flavour3){
        
            Random random = new Random();
            String[] color_charge = new String[3];
            
            int index1 = random.nextInt(3);
            int index2;// = -9;
            int index3;// = -9;
            
            if ( random.nextInt(2) == 0) {
                index2 = index1 -1 ;
                index3 = index1 +1 ;
            }
            else {
                index2 = index1+1;
                index3 = index1-1;
            }
            if ( index2 ==-1 ) index2 = 2;
            if ( index3 ==-1 ) index3 = 2;
            if ( index2 == 3 ) index2 = 0;
            if ( index3 == 3 ) index3 = 0;
            
            color_charge[index1] ="red";
            color_charge[index2] ="green";
            color_charge[index3] ="blue";            
            
            image1 = loadImage(flavour1,color_charge[0]);
            image2 = loadImage(flavour2,color_charge[1]);
            image3 = loadImage(flavour3,color_charge[2]);                       
            meson = false;            
            
            System.out.format("Color charge : %s %s %s\n",color_charge[0],color_charge[1], color_charge[2] );
        
    }
    
    public void resetPanel(){
        // 이미지 정리
        image1 = null;
        image2 = null;
        image3 = null;        
        
        if ( selected_particle == 1 ) {
            System.out.println("pion");
            buildMeson("u","dbar");
            repaint();
        }
        else if ( selected_particle == 2 ){
            System.out.println("kaon");
            buildMeson("u","ubar");
            repaint();
        }
        else if ( selected_particle == 3 ){
            System.out.println("Proton");
            buildBaryon("u","u","dbar");
            repaint();
        }
        else if ( selected_particle == 4 ){
            System.out.println("Neutron");
            buildBaryon("u","d","d");
            repaint();
        }
        
        return ;
    }

    public void setParticle(int selected_particle) {
        this.selected_particle = selected_particle;
    }    

    @Override
    protected void paintComponent(Graphics grphcs) {
        super.paintComponent(grphcs); //To change body of generated methods, choose Tools | Templates.
        System.out.println("Draw paint");
        if ( image1 != null) {
            System.out.println("Draw Real");
            grphcs.drawImage(image1, 100, 100, this);
            grphcs.drawImage(image2, 150, 150, this);
            if ( !meson) grphcs.drawImage(image3, 200, 100, this);            
        }
        
    }
    
    
}
